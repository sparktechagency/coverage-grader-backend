<?php

namespace App\Http\Controllers\Api\V1\Payment;

use App\Http\Controllers\Controller;
use App\Models\Transaction; // Import the Transaction model
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Exception;

/**
 * @group Payments
 * @subgroup Invoices
 * List & download invoices generated by Stripe.
 */
class InvoiceController extends Controller
{
    /**
     * Display a paginated list of the user's invoices.
     */
    public function index(Request $request)
    {
        try {
            //Paginate the results to handle users with many invoices efficiently.
            $invoices = $request->user()->invoicesIncludingPending()->map(function ($invoice) {
                //Provide comprehensive details for each invoice.
                return [
                    'id' => $invoice->id,
                    'number' => $invoice->number,
                    'date' => $invoice->date()->toFormattedDateString(),
                    'total' => $invoice->total(),
                    'status' => $invoice->status, // e.g., 'paid', 'open', 'void'
                    'due_date' => $invoice->due_date ? $invoice->due_date->toFormattedDateString() : null,
                    'subscription_id' => $invoice->subscription,
                    'download_url' => route('api.v1.payment.invoices.download', $invoice->id),
                ];
            });

            return response_success('Invoices fetched successfully.', $invoices);
        } catch (Exception $e) {
            Log::error('Failed to fetch invoices: ' . $e->getMessage());
            return response_error('Could not retrieve invoices. Please try again later.');
        }
    }

    /**
     * Download a specific invoice as a PDF.
     */
    public function download(Request $request, string $invoiceId)
    {
        try {
            //Dynamically determine the product description from your records.
            // We fetch the related transaction to get the plan description from its metadata.
            $transaction = Transaction::where('metadata->invoice_id', $invoiceId)->first();

            $productDescription = $transaction->metadata['plan_description'] ?? 'Subscribed Service';

            return $request->user()->downloadInvoice($invoiceId, [
                'vendor' => config('app.name'),
                'product' => $productDescription,
            ]);
        } catch (Exception $e) {
            Log::error("Failed to download invoice {$invoiceId}: " . $e->getMessage());
            // It's better to return a JSON error for API consistency
            return response_error('Could not download the invoice. It may not exist or an error occurred.', [], 404);
        }
    }
}
